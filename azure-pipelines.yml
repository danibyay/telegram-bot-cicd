# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main
- develop

resources:
- repo: self

variables:
- group: TELEGRAM
- group: TF_STORAGE_ACCOUNT


stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      fetchDepth: 0

    - task: gitversion/setup@0
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'
    
    - script: |
        echo SemVer: $(GitVersion.SemVer)
        echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
      displayName: echo next tag


    - task: Gradle@3
      displayName: build project
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

    # push on PRs to main or develop
    - task: Docker@2
      displayName: Build and push to dockerhub
      condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') )
      inputs:
        containerRegistry: 'dockerhub'
        repository: 'danibish/my_first_bot'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(GitVersion.SemVer)
    
    - task: TerraformTaskV3@3
      displayName: Prod Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/prod'
        backendServiceArm: 'Azure subscription 1(fd4eca56-866a-4d42-8ec3-cc4426d20760)'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate23904'
        backendAzureRmContainerName: 'tfstatebot'
        backendAzureRmKey: 'my_first_bot.tfstate'
    
    - task: TerraformTaskV3@3
      displayName: Prod Tf validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/prod'
    
    - task: TerraformTaskV3@3
      displayName: Prod tf plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/prod'
        environmentServiceNameAzureRM: 'azure-telegram'
        commandOptions: '-var token=$(danibishbot_token) -var tag=$(GitVersion.SemVer)'
    
    - task: TerraformTaskV3@3
      displayName: Prod terraform apply
      condition: and( succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/prod'
        commandOptions: '-var token=$(danibishbot_token) -var tag=$(GitVersion.SemVer)'
        environmentServiceNameAzureRM: 'azure-telegram'
    
    - task: TerraformTaskV3@3
      displayName: Dev Terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev'
        backendServiceArm: 'Azure subscription 1(fd4eca56-866a-4d42-8ec3-cc4426d20760)'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate23904'
        backendAzureRmContainerName: 'tfstatebot'
        backendAzureRmKey: 'my_first_bot_test.tfstate'
    
    - task: TerraformTaskV3@3
      displayName: Dev Tf validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev'
    
    - task: TerraformTaskV3@3
      displayName: Dev tf plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev'
        environmentServiceNameAzureRM: 'azure-telegram'
        commandOptions: '-var token=$(danibishbot_token) -var tag=$(GitVersion.SemVer)'
   
    - task: TerraformTaskV3@3
      displayName: Dev terraform apply
      condition: and( succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop') )
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/dev'
        commandOptions: '-var token=$(danibishbot_test_token) -var tag=$(GitVersion.SemVer)'
        environmentServiceNameAzureRM: 'azure-telegram'
    
    
